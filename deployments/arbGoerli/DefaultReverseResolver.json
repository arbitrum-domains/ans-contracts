{
  "address": "0x47AE1c9D8d5Ce96BC36C287adE463aA56e3ABEA0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ANS",
          "name": "ansAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ans",
      "outputs": [
        {
          "internalType": "contract ANS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebe4978a2cd2511963f5779958b65c11abbaa16d4342b04836dc1ca9bb83aaf4",
  "receipt": {
    "to": null,
    "from": "0x35EeDCA13afAE0E913f2a35fB3a5B4F117cAbb78",
    "contractAddress": "0x47AE1c9D8d5Ce96BC36C287adE463aA56e3ABEA0",
    "transactionIndex": 1,
    "gasUsed": "8795655",
    "logsBloom": "0x00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000000000000000010000000000000200000000000000020000080000004008000000000000080000000000100080000000000000000000008200000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000a00000000000000000100000000000000000000010000000000000000000000000008000040000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000040000000000001000000000000000000000",
    "blockHash": "0xe07f5c0af6c3ae5ab176a820774fd69c5ec0b6858a1e760a9ae5cdeed8fee028",
    "transactionHash": "0xebe4978a2cd2511963f5779958b65c11abbaa16d4342b04836dc1ca9bb83aaf4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1910476,
        "transactionHash": "0xebe4978a2cd2511963f5779958b65c11abbaa16d4342b04836dc1ca9bb83aaf4",
        "address": "0x9119903Fd6eF23Dcc65eE2A10aad94bF9d93bCdc",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0xc49b02c9364e4908aabacdb138b5d6eb273cfcbbf6c89cdae2c894959cdfaeec"
        ],
        "data": "0x00000000000000000000000035eedca13afae0e913f2a35fb3a5b4f117cabb78",
        "logIndex": 0,
        "blockHash": "0xe07f5c0af6c3ae5ab176a820774fd69c5ec0b6858a1e760a9ae5cdeed8fee028"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1910476,
        "transactionHash": "0xebe4978a2cd2511963f5779958b65c11abbaa16d4342b04836dc1ca9bb83aaf4",
        "address": "0x65705a7d034f4083efBF96329B2F2BF832925964",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x00000000000000000000000047ae1c9d8d5ce96bc36c287ade463aa56e3abea0",
          "0xcbeaf2b844b097131c5f7bc65891e8f51be8dd863d453b3f63abab23c347a77e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe07f5c0af6c3ae5ab176a820774fd69c5ec0b6858a1e760a9ae5cdeed8fee028"
      }
    ],
    "blockNumber": 1910476,
    "cumulativeGasUsed": "8795655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9119903Fd6eF23Dcc65eE2A10aad94bF9d93bCdc"
  ],
  "solcInputHash": "b967ab4897ed3a8ef524aedad8e9d002",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ANS\",\"name\":\"ansAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ans\",\"outputs\":[{\"internalType\":\"contract ANS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a default implementation of a resolver for reverse records, which permits only the owner to update it.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"ansAddr\":\"The address of the ANS registry.\"}},\"setName(bytes32,string)\":{\"details\":\"Sets the name for a node.\",\"params\":{\"_name\":\"The name to set.\",\"node\":\"The node to update.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/DefaultReverseResolver.sol\":\"DefaultReverseResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/registry/ANS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ANS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x10580ecfe4ce6b6d6a650f3c9807d9f735508eabc007790ed0be9ff83348d7e2\"},\"contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ANS.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable {\\n    ANS public ans;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ansAddr The address of the ANS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ANS ansAddr, NameResolver resolverAddr) {\\n        ans = ansAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ans.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ans.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ANS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ANS.\\n     * @return The ANS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return _claimWithResolver(msg.sender, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ANS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ANS.\\n     * @return The ANS node hash of the reverse record.\\n     */\\n    function claimForAddr(address addr, address owner)\\n        public\\n        authorised(addr)\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(addr, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ANS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ANS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ANS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ANS record specified with the\\n     *      address provided\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ANS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ANS node hash of the reverse record.\\n     */\\n    function claimWithResolverForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public authorised(addr) returns (bytes32) {\\n        return _claimWithResolver(addr, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ANS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ANS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            msg.sender,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ANS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ANS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        string memory name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            addr,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        ans.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ANS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _claimWithResolver(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) internal returns (bytes32) {\\n        bytes32 label = sha3HexAddress(addr);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentResolver = ans.resolver(node);\\n        bool shouldUpdateResolver = (resolver != address(0x0) &&\\n            resolver != currentResolver);\\n        address newResolver = shouldUpdateResolver ? resolver : currentResolver;\\n\\n        ans.setSubnodeRecord(ADDR_REVERSE_NODE, label, owner, newResolver, 0);\\n\\n        emit ReverseClaimed(addr, node);\\n\\n        return node;\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd99ac028b70ffa0d04f672b75135dcb2e90868d07ab30ff18dfc587b1eb9323d\"},\"contracts/resolvers/DefaultReverseResolver.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"../registry/ANS.sol\\\";\\nimport \\\"../registry/ReverseRegistrar.sol\\\";\\n\\n/**\\n * @dev Provides a default implementation of a resolver for reverse records,\\n * which permits only the owner to update it.\\n */\\ncontract DefaultReverseResolver {\\n    // namehash('addr.reverse')\\n    bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    ANS public ans;\\n    mapping (bytes32 => string) public name;\\n\\n    /**\\n     * @dev Only permits calls by the reverse registrar.\\n     * @param node The node permission is required for.\\n     */\\n    modifier onlyOwner(bytes32 node) {\\n        require(msg.sender == ans.owner(node));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor\\n     * @param ansAddr The address of the ANS registry.\\n     */\\n    constructor(ANS ansAddr) {\\n        ans = ansAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar registrar = ReverseRegistrar(ans.owner(ADDR_REVERSE_NODE));\\n        if (address(registrar) != address(0x0)) {\\n            registrar.claim(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the name for a node.\\n     * @param node The node to update.\\n     * @param _name The name to set.\\n     */\\n    function setName(bytes32 node, string memory _name) public onlyOwner(node) {\\n        name[node] = _name;\\n    }\\n}\\n\",\"keccak256\":\"0xafe33be3f0b437f28532d0011e2e0b882e515b6385104ddde87e96a305f8e3d1\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161071838038061071883398101604081905261002f9161016b565b600080546001600160a01b0319166001600160a01b03831690811782556040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526302571be39060240160206040518083038186803b1580156100a057600080fd5b505afa1580156100b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d8919061016b565b90506001600160a01b0381161561016457604051630f41a04d60e11b81523360048201526001600160a01b03821690631e83409a90602401602060405180830381600087803b15801561012a57600080fd5b505af115801561013e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610162919061018e565b505b50506101be565b60006020828403121561017c578081fd5b8151610187816101a6565b9392505050565b60006020828403121561019f578081fd5b5051919050565b6001600160a01b03811681146101bb57600080fd5b50565b61054b806101cd6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063691f343114610046578063773722131461006f578063a71ddb5314610084575b600080fd5b610059610054366004610335565b6100c9565b6040516100669190610421565b60405180910390f35b61008261007d36600461034d565b610163565b005b6000546100a49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610066565b600160205260009081526040902080546100e290610492565b80601f016020809104026020016040519081016040528092919081815260200182805461010e90610492565b801561015b5780601f106101305761010080835404028352916020019161015b565b820191906000526020600020905b81548152906001019060200180831161013e57829003601f168201915b505050505081565b6000546040517f02571be300000000000000000000000000000000000000000000000000000000815260048101849052839173ffffffffffffffffffffffffffffffffffffffff16906302571be39060240160206040518083038186803b1580156101cd57600080fd5b505afa1580156101e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020591906102fa565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023c57600080fd5b6000838152600160209081526040909120835161025b92850190610261565b50505050565b82805461026d90610492565b90600052602060002090601f01602090048101928261028f57600085556102d5565b82601f106102a857805160ff19168380011785556102d5565b828001600101855582156102d5579182015b828111156102d55782518255916020019190600101906102ba565b506102e19291506102e5565b5090565b5b808211156102e157600081556001016102e6565b60006020828403121561030b578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461032e578182fd5b9392505050565b600060208284031215610346578081fd5b5035919050565b6000806040838503121561035f578081fd5b82359150602083013567ffffffffffffffff8082111561037d578283fd5b818501915085601f830112610390578283fd5b8135818111156103a2576103a26104e6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156103e8576103e86104e6565b81604052828152886020848701011115610400578586fd5b82602086016020830137856020848301015280955050505050509250929050565b6000602080835283518082850152825b8181101561044d57858101830151858201604001528201610431565b8181111561045e5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600181811c908216806104a657607f821691505b602082108114156104e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212200bf84c68c0d6383a92548423bfc8dd0c4108d766a43ca342d9347344770b8a1964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063691f343114610046578063773722131461006f578063a71ddb5314610084575b600080fd5b610059610054366004610335565b6100c9565b6040516100669190610421565b60405180910390f35b61008261007d36600461034d565b610163565b005b6000546100a49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610066565b600160205260009081526040902080546100e290610492565b80601f016020809104026020016040519081016040528092919081815260200182805461010e90610492565b801561015b5780601f106101305761010080835404028352916020019161015b565b820191906000526020600020905b81548152906001019060200180831161013e57829003601f168201915b505050505081565b6000546040517f02571be300000000000000000000000000000000000000000000000000000000815260048101849052839173ffffffffffffffffffffffffffffffffffffffff16906302571be39060240160206040518083038186803b1580156101cd57600080fd5b505afa1580156101e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020591906102fa565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023c57600080fd5b6000838152600160209081526040909120835161025b92850190610261565b50505050565b82805461026d90610492565b90600052602060002090601f01602090048101928261028f57600085556102d5565b82601f106102a857805160ff19168380011785556102d5565b828001600101855582156102d5579182015b828111156102d55782518255916020019190600101906102ba565b506102e19291506102e5565b5090565b5b808211156102e157600081556001016102e6565b60006020828403121561030b578081fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461032e578182fd5b9392505050565b600060208284031215610346578081fd5b5035919050565b6000806040838503121561035f578081fd5b82359150602083013567ffffffffffffffff8082111561037d578283fd5b818501915085601f830112610390578283fd5b8135818111156103a2576103a26104e6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156103e8576103e86104e6565b81604052828152886020848701011115610400578586fd5b82602086016020830137856020848301015280955050505050509250929050565b6000602080835283518082850152825b8181101561044d57858101830151858201604001528201610431565b8181111561045e5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600181811c908216806104a657607f821691505b602082108114156104e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212200bf84c68c0d6383a92548423bfc8dd0c4108d766a43ca342d9347344770b8a1964736f6c63430008040033",
  "devdoc": {
    "details": "Provides a default implementation of a resolver for reverse records, which permits only the owner to update it.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "ansAddr": "The address of the ANS registry."
        }
      },
      "setName(bytes32,string)": {
        "details": "Sets the name for a node.",
        "params": {
          "_name": "The name to set.",
          "node": "The node to update."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13385,
        "contract": "contracts/resolvers/DefaultReverseResolver.sol:DefaultReverseResolver",
        "label": "ans",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ANS)12254"
      },
      {
        "astId": 13389,
        "contract": "contracts/resolvers/DefaultReverseResolver.sol:DefaultReverseResolver",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ANS)12254": {
        "encoding": "inplace",
        "label": "contract ANS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}